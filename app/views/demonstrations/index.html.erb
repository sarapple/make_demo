	<script type="text/javascript">
		$(document).on('submit', '.make-form, .my-class', function(){
		    console.log('Forms may not be submitted. Thank you.');
		    return false;
	    });
		$(document).on('mouseenter','.action:not(#clear)',
			function(){
			$(this).css('opacity','0.5');
			$(this).css('cursor','pointer');
			var hovered='.'+$(this).attr('action').replace('add/','');
			var description='';
			switch(hovered){
				case '.custom':
					description="(<span class='integer'>columns</span>,<span class='integer'>rows</span>)<br>Creates a custom-size table with empty cells."
					break;
				case '.th':
					description="('<span class='string'>Column Name 1</span>','<span class='string'>Column Name 2</span>',...)<br>Creates a custom headers."
					break;
				case '.table':
					description="Needed to create a largely preformatted table from database content."
					break;
				case '.model':
					description="('<span class='string'>Model_name_as_string</span>')<br>Specifies model to derive content from. Default tables and forms will ignore the 'id', 'created_at', and 'updated_at' columns! <br>Tables: Any column containing passwords are always hidden. For rows, Also, all rows will come with default show/edit/destroy links!<br>Forms: Any column with password in the name will make the form contain a 'password' field"
					break;
				case '.order':
					description="('<span class='string'>column ORDER</span>')<br>Orders the data by ASC/DESC."
					break;
				case '.cut':
					description="('<span class='string'>column</span>')<br>Hides a column that would otherwise display by default."
					break;
				case '.limit':
					description="(<span class='integer'>integer</span>)<br>Limits the number of rows shown by the given integer; note: do not pass a string."
					break;
				case '.combo':
					description="{'<span class='string'>New Combined Column Name</span>'=>['<span class='string'>column_to_combine_1</span>','<span class='string'>column_to_combine_2</span>',...]}<br>Combines multiple columns into one and creates a name for that new column; you must pass in a hash."
					break;
				case '.show':
					description="('<span class='string'>column</span>')<br>Displays a column that by default would be hidden (i.e., 'id', 'created_at', 'updated_at'. Any column containing passwords are always hidden."
					break;
				case '.file':
					description="Prints complete html table code in table_html.txt (located in your root application folder)! Just copy it and paste into your html file(s)!"
					break;
				case '.for!':
					description="Prints shorter html table code using for loops in table_html.txt (located in your root application folder)! Just copy it and paste into your html file(s) - note the comment and the line of code needed for your controller file."
					break;
				case '.now!':
					description="Finally renders your table or form in your chosen view file. If your controller has a line like '@table=Main.table.model('Person').file.now!', then your view file should have '<%= @table %>' - that's it!"
					break;
				//Sara's added portions regarding form START
				case '.form':
					description="Create a form template for setting up a new form"
					break;
				case '.action':
					description="(<span class='string'>url</span>)<br>Change the form action/url customized to your routes"
					break;
				case '.class':
					description="(<span class='string'>className</span>)<br>Change the form action/url customized to your routes"
					break;
				case '.default':
					description="(<span class='string'>column</span>), (<span class='integer'>value</span>)<br>Set a default value for a specific column/field. Because no options exist, it will be a hidden field. Value is the default value (which can be a variable)"
					break;
				case '.method':
					description="(<span class='string'>type</span>), (<span class='integer'>id</span>)Change the post method to a put or patch. Id is the variable that will be passed in as part of the form's action/url. Id can be an exact integer or a variable"
					break;
				case '.select':
					description="(<span class='string'>column</span>), (<span class='array'>array</span>) Similar to default, but for multiple values.Based on an array of options, you can create a select/option field."
					break
				case '.assoc':
					description="(<span class='string'>column</span>), (<span class='string'>assocColumn</span>), (<span class='string'>*assocModel</span>) Similar to select, in that this method will find the associated table and pass in the corresponding value to that id. You can optionally pass in the associated model if it does not match up with convention."
					break
				case '.hide':
					description="(<span class='array'>array</span>) This method will hide any values you do not want to have appear in your form). Perfect for administrative privileges to submit on the database side"
					break
				case '.no_pw_confirm':
					description="By default, a confirmation password is requested. Password_confirmation will not be added to the form by chaining this method."
					break;
				//Sara's added portions regarding form END
			}
			$('#method_description h3').html(hovered);
			$('#method_description p').html(description);
			$(this).mouseleave(function(){
				$(this).css('opacity','1');
				$(this).css('cursor','auto');
				$('#method_description').children().html('');
			});
		});
		$(document).ready(function(){
			$('#table_result').hide();
			$('#html_result').hide();
			$('#run_code_form').submit(function(){
				$.post(
					$(this).attr('action'),
					$(this).serialize(),
					function(data){
						$('#method_description').hide();
						console.log(data.to_append);
						$('#table_result').append(data.to_append);
						$('.pretty').text(String(data.to_append));
						if(String(data.to_append[1])=='f')
						{
							//reset css margin
							$('#table_result form').css('margin', '0');
							$('#table_result').css('margin-right', '5px');							
							//make form results inline-block
							$('#html_result, #table_result').css('clear', 'none');
							$('#html_result, #table_result').css('display', 'inline-block');
							
							// change height to 100% result from
							$('#table_result').css('height', '100%');
							$('#table_result').css('width', 'auto');
							var width = $('#table_result').width();
							var height = $('#table_result').height();
							var rwidth = $('.results').width();
							html_width = rwidth-width-8;

							//make width and height 0 so that it appears when animated
							$('#table_result').css('width', '0px');
							$('#html_result').css('width', '0px');
							$('#html_result').css('height', '0px');

							//make the table and html show
							$('#html_result').show();
							$('#table_result').show();

							//make table and html appear
							$( "#table_result" ).animate(
								{ 	width: width,
									height: '100%' },
								 {	duration: 2000 }
							);	
							$( "#html_result" ).animate(
								{ 	height: height,
									width: html_width }, 
								 {	duration: 2000 }
							);	
						}
						else {
							//make table results clear left and block
							$('#html_result, #table_result').css('clear', 'left');
							$('#html_result, #table_result').css('display', 'block');

							//make table results clear left and block
							$('#table_result table').css('width', '100%');
							$('#table_result').css('width', '100%');
							$('#html_result').css('width', '100%');

							var width = $('#table_result').width();

							$('#table_result').css('height', 'auto');
							$('#html_result').css('height', 'auto');
							$('#table_result').css('width', '0px');
							$('#html_result').css('width', '0px');
							$('#html_result').show();
							$('#table_result').show();	
							$( "#html_result, #table_result" ).animate(
								{ width: width }, 
								{ duration: 2000 }
							);	
						}
						$('#tree').css('height', 'auto');
					},
					'json'
				);
				return false;
			});
		});
		$(document).on('click','.action',function(){
			if(this.id!='clear'){
				$(this).removeClass('action');
				$(this).siblings().remove();
			}
			else {
			}
			var clicked='.'+$(this).attr('action').replace('add/','');
			$.get(
				'/demonstrations/'+$(this).attr('action'),
				$(this).serialize(),
				function(data){
					if(data.to_append=='CLEAR'){
						$('#your_code').html('');
						$('.action_column').remove();
						$('#tree').append('<div class="nestled action_column"><p class="action green" action="add/table">.table</p><p class="action pink" action="add/form">.form</p></div>');
						$('#success').hide();
						$('#sample_code').removeClass('workable');
						

						$('#table_result').html('');
						$('.pretty').text('');
						$('#tree').css('height', '400px');
						$('#method_description').show();
						$('#table_result').hide();
						$('#html_result').hide();
					}else{
						var rows='';
						var color='green';
						if(data.color=='pink'){
							color = 'pink';
						}
						for(method in data.to_append){
							rows+='<p class="action '+color+'" action="add/'+data.to_append[method]+'">.'+data.to_append[method]+'</p>';
						}
						$('#tree').append('<div class="nestled action_column">'+rows+'</div>');
						if(data.code.length){
							data.code='('+data.code+')';
						}
						$('#your_code').append(clicked+data.code);
						$('#run_code').val($('#your_code').html());
						if(data.workable){
							$('#sample_code').addClass('workable');
							$('#success').show();
						}
					}
				},
				'json'
				);
			return false;
		});
	</script>
<div class='container'>
	<div class='row'>
		<div class='c8 o2 margin-top margin-bottom'>
			<div id='top'>
				<div class='c5 o1 align-top'><h3>MAKE.gem Demonstration</h3></div>
				<div class='buttons c5 o1'>
					<form class="nestled" id="run_code_form" action="/demonstrations/run" method="post">
						<input name="authenticity_token" value="<%= form_authenticity_token %>" type="hidden">
						<input id="run_code" type="hidden" name="run_code" val="">
						<input class='runit' type="submit" value="Run">
					</form>
					<button id="clear" class="btn action nestled" action="clear">Clear</button>
				</div>
			</div>
		</div>
	</div>
	<div class='row'>
		<div class='c8 o2'>
			<p>Click on the form or table boxes and applicable methods will appear!</p>
		</div>
	</div>
	<div class='row'>
		<div class="c8 o2 margin-top margin-bottom">
			<h3 class="nestled" id="sample_code">Sample code: Make<span id="your_code"></span><span class="nestled" id="success"> (That'll do!)</span></h3><br>
		</div>
	</div>
	<div class='row'>
		<div class="c8 o2 margin-bottom">
			<p class="instructions">*Your code must end with <span class="boxed">.for!</span>, <span class="boxed">.file</span> or <span class="boxed">.now!</span>; you can use <span class="boxed">.file.now!</span> on a non-<span class="boxed">.custom</span> table.</p>
		</div>
	</div>
	<div class='row'>
		<div class='c8 o2'>
			<div class="nestled first_cols">
				<p>Make</p>
			</div>

<!-- CHANGED THIS - Added a 'form' box -->
			<div id="tree" class="nestled">
				<div class="nestled first_cols action_column">
					<p class="action green" action="add/table">.table</p>
					<p class="action pink" action="add/form">.form</p>
				</div>
			</div>
		</div>
	</div>
	<div class='row'>
		<div class='c8 o2 clear-top'>
			<div class='results'>
				<div id="table_result">
				</div>
				<div id="html_result">
					<pre class="pretty">
					</pre>
				</div>
			</div>
		</div>
	</div>
	<div class='row'>
		<div class="c8 o2">
			<div id="method_description">
				<h3></h3>
				<p></p>
			</div>
		</div>
	</div>
</div>
